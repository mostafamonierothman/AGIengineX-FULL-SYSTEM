# agents/self_monetization_agent.py

from debug.debug_logger import log_info
from memory.memory import Memory
import random

class Agent:
    def __init__(self, memory: Memory):
        self.memory = memory
        self.agent_name = "Self-Monetization-Agent"

    def run(self):
        log_info(f"ðŸ’° [{self.agent_name}] Running monetization cycle...")

        # Example â†’ simulate generating leads
        potential_leads = [
            {"name": "Client A", "industry": "Healthcare", "value_estimate": 5000},
            {"name": "Client B", "industry": "FinTech", "value_estimate": 12000},
            {"name": "Client C", "industry": "AI Startups", "value_estimate": 8000},
        ]

        selected_lead = random.choice(potential_leads)
        log_info(f"ðŸ’¡ [{self.agent_name}] Found opportunity: {selected_lead}")

        # Save opportunity to MEMORY
        opportunity_data = {
            "opportunity_type": "Lead Generation",
            "source_agent": self.agent_name,
            "value_estimate": selected_lead["value_estimate"],
            "client_name": selected_lead["name"],
            "industry": selected_lead["industry"],
            "status": "new",
            "notes": "Generated by Self-Monetization-Agent",
            "timestamp": "now()"
        }
        self.memory.save_opportunity(opportunity_data)

        # Log action
        self.memory.log_action(
            agent_name=self.agent_name,
            action_type="Generated Opportunity",
            payload=opportunity_data
        )

        log_info(f"âœ… [{self.agent_name}] Monetization cycle complete.")
