# agents/opportunity_agent.py

from debug.debug_logger import log_info
from memory.memory import Memory
import random

class Agent:
    def __init__(self, memory: Memory):
        self.memory = memory
        self.agent_name = "Opportunity-Agent"

    def run(self):
        log_info(f"ðŸš€ [{self.agent_name}] Running opportunity cycle...")

        # Example â†’ simulate scanning market
        market_opportunities = [
            {"type": "AI consulting deal", "value_estimate": 10000, "client_name": "AI Innovators Ltd"},
            {"type": "Healthcare partnership", "value_estimate": 15000, "client_name": "Global Med Co"},
            {"type": "SaaS B2B lead", "value_estimate": 7000, "client_name": "SaaSify Inc"}
        ]

        selected_opp = random.choice(market_opportunities)
        log_info(f"ðŸŒŸ [{self.agent_name}] Found opportunity: {selected_opp}")

        # Save to opportunities_memory
        opportunity_data = {
            "opportunity_type": selected_opp["type"],
            "source_agent": self.agent_name,
            "value_estimate": selected_opp["value_estimate"],
            "client_name": selected_opp["client_name"],
            "status": "new",
            "notes": "Generated by Opportunity-Agent",
            "timestamp": "now()"
        }
        self.memory.save_opportunity(opportunity_data)

        # Log action
        self.memory.log_action(
            agent_name=self.agent_name,
            action_type="Generated Business Opportunity",
            payload=opportunity_data
        )

        log_info(f"âœ… [{self.agent_name}] Opportunity cycle complete.")
